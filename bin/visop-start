#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander') // https://github.com/tj/commander.js
const exists = require('fs').existsSync
const fse = require('fs-extra')
const path = require('path')
const ora = require('ora')
const home = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const inquirer = require('inquirer')
const rm = require('rimraf').sync
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const warnings = require('../lib/warnings')
const localPath = require('../lib/local-path')
const shell = require('shelljs')
const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath
var kill = require('tree-kill'); //https://github.com/pkrumins/node-tree-kill
// const detect = require('detect-port');
const find = require('find-process'); // https://www.npmjs.com/package/find-process
// var portfinder = require('portfinder')
const getPort = require('get-port');  // https://www.npmjs.com/package/get-port

var watcher = (label, cmd, withSuccess = true) => {
  if (label.length > 0) {
    shell.echo(label);
  }

  const data = shell.exec(cmd, {
    silent: false
  });

  if (data.stderr && data.code !== 0) {
    console.error(data.stderr);
    process.exit(1);
  }

  if (label.length > 0 && withSuccess) {
    shell.echo('✅  Success');
    shell.echo('');
  }

};

/**
 * Usage.
 */

program
  .usage('start')
  .option('-p, --path [value]', 'define the code path')
  .option('-P, --PORT [n]', 'define the running port', parseInt)
  .option('-f, --force', 'define whether kill the process when port is not free')
  .option('-n, --name [value]', 'define the json name used in the admin ui', '项目')
  .option('-i, --id [value]', 'define the json unique id used in the admin ui')
  .parse(process.argv)
  // .option('--offline', 'use cached template')

/**
 * Help.
 */

program.on('--help', () => {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ vue init webpack my-project')
  console.log()
  console.log(chalk.gray('    # create a new project straight from a github template'))
  console.log('    $ vue init username/repo my-project')
  console.log()
})

/**
 * Help.
 */

// function help () {
//   program.parse(process.argv)
//   if (program.args.length < 1) return program.help()
// }
// help()

/**
 * Settings.
 */

// let testCodePath = process.cwd()
// const hasSlash = codePath.indexOf('/') > -1
var template = "visop-defaultconfig"
const rawName = ""
const inPlace = !rawName || rawName === '.'
const indexJsonName = program.name || 'project1'; // index.json里meta的id
const indexJsonId = program.id || 'project1' // index.json里meta的name
// console.log('dddddddddddddddddddd', indexJsonName, indexJsonId)
const clone = program.clone || false

const tmp = path.join(home, '.visop-templates', template.replace(/[\/:]/g, '-'))
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

var codePath = '.'
// console.log(',,,', program)
if (program.path) {
  codePath = program.path
}
var port = 8050
var forcePort = false
if(program.PORT){
  port = program.PORT || 8050
  process.env.PORT = port;

}
if(program.force){
  forcePort = true;
}
console.log('code path:', path.posix.resolve(codePath))
console.log('listen on port:', port)
codePath = path.posix.resolve(codePath)
const hasSlash = codePath.indexOf('/') > -1

const to = codePath
// process.exit(0)
/**
 * Padding.
 */

console.log()
process.on('exit', () => {
  console.log("server stop")
})
process.env.CODE_PATH = codePath;
// const kill = require('kill-port')
// kill(8050).then(res =>{
//   console.log("killed 8050");
  
// }).catch(res => {
//   console.log('error when kill port process,',res)
// })
var childProcess = null;

const chokidar = require('chokidar');
const chokidarWatcher = chokidar.watch(codePath, { ignoreInitial: true, awaitWriteFinish: true, ignored:/\.git/ });
// const chokidarWatcher = chokidar.watch(codePath, { ignoreInitial: true });
var isChanging = false;
// console.log("2222222222222222222222222",path.join(codePath),chokidarWatcher.getWatched())
chokidarWatcher.on('all', (event, filename) => {

    console.log('visop files changed', event, filename)
    if(!isChanging){
      isChanging = true;
      shellCmd = `sh ${codePath}/visop/gitpush.sh ${codePath}`;
      shellResult = shell.exec(shellCmd);
      isChanging = false
    }

    if(event == 'add' ){
      var temp = path.basename(filename)
      var temp1 = path.dirname(filename)
      console.log('temp,',temp,', ',path.basename(temp1))
      if(temp.endsWith('.json') && path.basename(temp1) == 'visop'){
        console.log('hahahhaahhahaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')
        if(childProcess){
          kill(childProcess.pid, 'SIGTERM', function(err){
            if(err){
              console.log('kill port process error,', err)
            }
            childProcess = shell.exec('npm start', {async:true})
            childProcess.stdout.on('exit', function(data, signal) {
              /* ... do something with data ... */
              console.log(`子进程收到信号 ${signal} 而终止`);

            })
          })
        }
      }
    }
});


find('port', port)
.then(function (list) {
  if (!list.length) {
    console.log(`port ${port} is free now`);
    runserver()
  } else {
    if(forcePort){
      console.log(`%s is listening port ${port} , will kill it`, list[0].name);
      kill(list[0].pid, 'SIGKILL', function(err) {
        // Do things
        if(err){
          console.log('kill port process error,', err)
        }
        console.log('success kill port process ,')
        runserver()
      })
    }else{
      // portfinder.basePort = port
      getPort({port: port}).then(newPort => {
        console.log(`${port}端口被占用，开启新端口${newPort}`)
        process.env.PORT = newPort;
        port = newPort
        runserver()
        // Will use 3000 if available, otherwise fall back to a random port
      });
      // portfinder.getPort(function(err, newPort){
      //   if (port !== newPort) {
      //     console.log(`${port}端口被占用，开启新端口${newPort}`)
      //     }
      //     console.log(`${port}端口被占用，开启新端口${newPort}`)
      //     port = newPort
          
      // })
    }
  }
  
})

console.log('end .............................')
// detect(port, (err, _port) => {
//   if (err) {
//     console.log(err);
//   }

//   if (port == _port) {
//     console.log(`port: ${port} was not occupied`);

//   } else {
//     console.log(`port: ${port} was occupied, try port: ${_port}`);
//   }

// });


// if (inPlace || exists(to)) {
//   inquirer.prompt([{
//     type: 'confirm',
//     message: inPlace
//       ? 'Generate project in current directory?'
//       : 'Target directory exists. Continue?',
//     name: 'ok'
//   }]).then(answers => {
//     if (answers.ok) {
//       run()
//     }
//   }).catch(logger.fatal)
// } else {
//   runserver()
// }

/**
 * Check, download and generate the project.
 */


function runserver(){
  
  // process.exit()
  var serverdir = path.join(__dirname, '..','src','server')
  // console.log()
  if(!exists(path.join(codePath, 'visop'))){
    // var temp = fse.ensureDirSync()
    const spinner = ora('downloading template')
    console.log('visop config folder not exists ,auto download and generate visop folder in code root path')
    spinner.start()
    let tmp = path.join(home, '.visop-templates', "visop-defaultconfig")
    var destDir = path.join(codePath,'visop')
    fse.ensureDirSync(tmp)
    download("zhenyuan2015/visop-defaultconfig", tmp, { clone }, err => {
      spinner.stop()
      if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
      logger.success('Generated visop folder success "%s".', tmp)
      fse.ensureDirSync(tmp)
      fse.copySync(tmp, destDir)
      modifyIndexJson(path.join(destDir, 'index.json'), {
        id: indexJsonId,
        name: indexJsonName
      })
      console.log()
      shell.cd(path.join(codePath,'visop'));
      watcher(`📦  Starting server  in ${serverdir}...`, 'npm install');
      shell.cd(serverdir);
      // watcher(`📦  Starting server  in ${serverdir}, this may take several minutes,you can visit localhost:${port} later...`, 'npm install && npm start');
      console.log(`📦  Starting server  in ${serverdir}, this may take several minutes,you can visit localhost:${port} later...`)
      childProcess = shell.exec('npm install && npm start', {async:true})
      // child.stdout.on('data', function(data) {
      //   /* ... do something with data ... */
      //   console.log(data)
      // })
      childProcess.stdout.on('exit', function(data, signal) {
        /* ... do something with data ... */
        console.log(`子进程收到信号 ${signal} 而终止`);

      })
      // generate(name, tmp, to, err => {
      //   if (err) logger.fatal(err)
      //   console.log()
      //   logger.success('Generated "%s".', name)
      // })
    })
  }else{
    shell.cd(path.join(codePath,'visop'));
    watcher(`📦  Starting server  in ${serverdir}...`, 'npm install');
    shell.cd(serverdir);
    // watcher(`📦  Starting server  in ${serverdir}, this may take several minutes,you can visit localhost:${port}  later...`, 'npm install && npm start');
    console.log(`📦  Starting server  in ${serverdir}, this may take several minutes,you can visit localhost:${port} later...`)
    childProcess = shell.exec('npm install && npm start', {async:true})
    // child.stdout.on('data', function(data) {
    //   /* ... do something with data ... */
    //   console.log(data)
    // })
    childProcess.stdout.on('exit', function(data, signal) {
      /* ... do something with data ... */
      console.log(`子进程收到信号 ${signal} 而终止`);
      
    })
  }

}

function modifyIndexJson(indexpath, obj){
  console.log(`modify ${indexpath} with `, JSON.stringify(obj))
  var routerConfig = require(indexpath);

  for(var i=0;i<routerConfig['meta'].length;i++){
    // console.log("routerConfig['meta'][i]",routerConfig['meta'][i])
    if(routerConfig['meta'][i].id == 'id'){
      routerConfig['meta'][i].value = obj.id
    }
    if(routerConfig['meta'][i].id == 'name'){
      // console.log("routerConfig['meta'][i].id",routerConfig['meta'][i].id)
      routerConfig['meta'][i].value = obj.name
    }
  }

  fse.writeFileSync(indexpath, JSON.stringify(routerConfig, null, 4));
}

function run () {
  // check if template is local
  if (isLocalPath(template)) {
    const templatePath = getTemplatePath(template)
    if (exists(templatePath)) {
      generate(name, templatePath, to, err => {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    checkVersion(() => {
      if (!hasSlash) {
        // use official templates
        const officialTemplate = 'zhenyuan2015/' + template
        if (template.indexOf('#') !== -1) {
          downloadAndGenerate(officialTemplate)
        } else {
          if (template.indexOf('-2.0') !== -1) {
            warnings.v2SuffixTemplatesDeprecated(template, inPlace ? '' : name)
            return
          }

          // warnings.v2BranchIsNowDefault(template, inPlace ? '' : name)
          downloadAndGenerate(officialTemplate)
        }
      } else {
        downloadAndGenerate(template)
      }
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  spinner.start()
  // Remove if local template exists
  if (exists(tmp)) rm(tmp)
  download(template, tmp, { clone }, err => {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate(name, tmp, to, err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}

